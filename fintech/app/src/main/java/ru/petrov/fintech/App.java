/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.petrov.fintech;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.*;

public class App {
    private static final SimpleDateFormat SIMPLE_FORMAT = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");

    public static void main(String[] args) throws ParseException {
        List<Weather> weathers = new ArrayList<>(List.of(
                Weather.of("Moscow", 22, SIMPLE_FORMAT.parse("2023.09.20 12:22:22")),
                Weather.of("Moscow", 25, SIMPLE_FORMAT.parse("2023.09.18 17:18:56")),
                Weather.of("Omsk", 15, SIMPLE_FORMAT.parse("2023.08.20 09:44:15")),
                Weather.of("Zelenogradsk", 15, SIMPLE_FORMAT.parse("2023.08.20 09:44:15")),
                Weather.of("Samara", 5, SIMPLE_FORMAT.parse("2022.04.11 23:44:32")),
                Weather.of("Moscow", 13, SIMPLE_FORMAT.parse("2023.06.14 05:35:11")),
                Weather.of("Samara", 20, SIMPLE_FORMAT.parse("2023.06.03 14:16:01"))
        ));

        //среднее значение температур в регионах
        System.out.println("Average temperature");
        weathers.stream()
                .collect(groupingBy(Weather::getName, averagingLong(Weather::getTemp)))
                .forEach((key, value) -> System.out.printf("%s: %f%n", key, value));

        System.out.println();
        //функция для поиска регионов с большей температурой
        BiFunction<List<Weather>, Integer, List<String>> areaFinder =
                (weat, temp) -> weat.stream()
                        .filter(w -> w.getTemp() > temp)
                        .map(Weather::getName)
                        .distinct()
                        .collect(toList());
        System.out.println("Areas with temperature more than 15");
        System.out.println(areaFinder.apply(weathers, 15));

        System.out.println();
        //Map с ключом id и списком температур
        System.out.println("Map with id and temps");
        weathers.stream()
                .collect(groupingBy(Weather::getId, mapping(Weather::getTemp, toList())))
                .forEach((key, value) -> System.out.println(key + ": " + value));

        System.out.println();
        //Map с ключом temp и коллекцией Weather которым соответствует температура
        System.out.println("Map with temp and weathers");
        weathers.stream()
                .collect(groupingBy(Weather::getTemp, toList()))
                .forEach((key, value) -> System.out.println(key + ": " + value));
    }
}
